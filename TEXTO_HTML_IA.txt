Criei esse site para estudos e gostaria da sua ajuda para resolver algo.

1 - quando aparece a resolu√ß√£o e eu clico nela, o listening l√™ toda a quest√£o, mas eu queria que lesse somente a resolu√ß√£o que eu cliquei.

2 - s√≥ que eu estou com um problema, quando eu clico na div resolu√ß√£o que foi criada, para que o c√≥digo possa ler, ele consegue capturar o paragrafo corretamente, mas na hora de ler ele da um erro de leitura. script.js:168 Erro na leitura: interrupted currentUtterance.onerror	@	script.js:168
OBS. para todas outras parte de leira ele funciona corretamente. menos nessa.

3 - 

Obs.: N√£o coloque espa√ßo antes dos c√≥digo (para n√£o dar erro de caracteres quando eu for colar).

...................INICIO DO index.html......................
...restante do c√≥digo...

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estudo para Concurso P√∫blico: Quest√µes e Resolu√ß√µes</title>
    
    <meta name="description" content="Prepare-se para concursos p√∫blicos com quest√µes atualizadas, gabaritos e resolu√ß√µes detalhadas. Estude de forma eficaz para sua aprova√ß√£o.">
    <meta name="keywords" content="concurso p√∫blico, quest√µes, provas, estudo, prepara√ß√£o, gabarito, resolu√ß√£o, simulado, legisla√ß√£o, portugu√™s, racioc√≠nio l√≥gico">
    <meta name="author" content="Seu Nome ou Nome da Plataforma">
    <meta name="email" content="c.alberto.ti14@gmail.com">
    <link rel="canonical" href="https://estudodeprovas.netlify.app/"> 
    <link rel="shortcut icon" href="midia/favicon.ico" type="image/x-icon"> 
    
    <link rel="stylesheet" href="estilos/style.css">
    <link rel="stylesheet" href="estilos/style_apoio.css"> 

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet"> 
    
    <meta property="og:url" content="https://estudodeprovas.netlify.app/"> 
    <meta property="og:type" content="website">
    <meta property="og:title" content="Estudo para Concurso P√∫blico: Prepare-se e Conquiste Sua Vaga!">
    <meta property="og:description" content="Acesse quest√µes de concursos p√∫blicos com resolu√ß√µes, modo estudo e acompanhamento de desempenho para sua aprova√ß√£o.">
    <meta property="og:image" content="https://estudodeprovas.netlify.app/midia/banner_sitedeestudos.png"> 
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:image:alt" content="Banner de Apresenta√ß√£o do Site de Estudos para Concursos P√∫blicos">

    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@SeuUsuarioDoTwitter"> 
    <meta name="twitter:title" content="Estudo para Concurso P√∫blico: Prepare-se e Conquiste Sua Vaga!">
    <meta name="twitter:description" content="Acesse quest√µes de concursos p√∫blicos com resolu√ß√µes, modo estudo e acompanhamento de desempenho para sua aprova√ß√£o.">
    <meta name="twitter:image" content="https://estudodeprovas.netlify.app/midia/banner_sitedeestudos.png"> 
    
    <meta name="google-site-verification" content="SEU_CODIGO_DE_VERIFICACAO_AQUI" />
    
    <style>
        /* Mantenha seus estilos internos aqui, se houver */
    </style>
</head>

<body>
    <header>
        <h1>Simulado INSS</h1>
    </header>

    <nav>
        <button id="btnZerar">ZERAR</button>
        <button id="btnValidar">VALIDAR</button>
        <button id="btnLer">LER TUDO</button>
        <button id="btnStop">STOP LEITURA</button>
        <button id="btnEstudo">MODO ESTUDO</button>
        <button id="btnPrev">‚¨ÖÔ∏è</button>
        <button id="btnProxima">‚û°Ô∏è</button>
        <button id="btnLista">LISTA DE PROVAS</button>

        <div class="controls-group">
            <label for="modoLeitura">MODO LEITURA:</label>
            <select id="modoLeitura">
                <option value="completa">Ler toda a quest√£o</option>
                <option value="enunciado">Ler somente o enunciado</option>
                <option value="mudo">Mudo</option>
            </select>
        </div>



        <div class="controls-group">
            <span>SCORE: <span id="scoreDisplay">0/10</span></span>

        </div>
            <a href="https://conhecimento.fgv.br/concursos#tab-text-127-content" target="_blank">COMCURSOS</a>
        </nav>


        <div id="info">
            <h2>"Para que seu dispositivo possa ler a quest√£o para voc√™, basta clicar no enunciado desejado"...bons estudos! üòâüëç</h2>

        </div>


    <div class="container">
        <div id="listaExercicios" style="display: none;">
            </div>
        <div id="quiz-container">
            </div>
    </div>


    <section id="apoio">
        <div>
            <a href="mailto:suportecalp@gmail.com?subject=Contato%20Sobre%20ESTUDO%20DE%20PROVAS">
                <img src="midia/faleconosco.png" alt="Fale Conosco" class="fale-conosco-icon"> FALE CONOSCO (Link Direto)
            </a>
        </div>

        <p>COMPARTILHAR CONHECIMENTO</p>
        
    <div class="share-buttons">
        <a href="#" id="shareFacebook"><img src="midia/comp_facebook.png" alt="Compartilhar no Facebook"></a>
        <a href="#" id="shareWhatsapp"><img src="midia/comp_whatsapp.png" alt="Compartilhar no WhatsApp"></a>
    </div>

    <div class="copy-link-button">
        <button id="copyLinkButton">COPIAR LINK</button>
    </div>

    <div><a href="apoio.html" target="_blank" >APOIAR COM DONATIOVO</a> </div>
    </section>

    <footer>
        <p>&copy; 2025 Seu Site de Estudos. Todos os direitos reservados.</p>
    </footer>

    
    <script src="script/provas.js"></script> 
    <script src="script/script.js"></script>
    <script src="script/compartilhe.js"></script>
    <script src="script/contato.js"></script>


</body>
</html>

...restante do c√≥digo...
...................FIM DO index.html......................



...................INICIO DO style.css......................
...restante do c√≥digo...

/* Geral */
body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f7f6;
    color: #333;
    line-height: 1.6;
}

.container {
    max-width: 960px;
    margin: 20px auto;
    padding: 20px;
    background-color: #ffffff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
}

/* Cabe√ßalho */
header {
    background-color: #2c3e50;
    color: #ffffff;
    padding: 15px 0;
    text-align: center;
    border-radius: 8px 8px 0 0;
}

header h1 {
    margin: 0;
    font-size: 2em;
    background-color: transparent;
}


/* Menu de Navega√ß√£o */
nav {
    background-color: #34495e;
    padding: 10px 0;
    border-radius: 0 0 8px 8px;
    text-align: center;
    margin-bottom: 20px;
    display: flex; /* Usar flexbox para alinhar itens */
    flex-wrap: wrap; /* Permitir quebra de linha em telas menores */
    justify-content: center; /* Centralizar itens */
    align-items: center; /* Alinhar verticalmente */
    gap: 10px; /* Espa√ßo entre os itens */
}

nav button {
    background-color: #e67e22;
    color: #ffffff;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9em; /* Ajuste o tamanho da fonte para caber mais bot√µes */
    transition: background-color 0.3s ease;
    white-space: nowrap; /* Impede que o texto do bot√£o quebre linha */
}

nav button:hover {
    background-color: #d35400;
}

nav a {
    text-decoration: none;
    padding: 0 8px 0 8px;
    background-color: black;
    color: #2980b9;
    border-radius: 10px;
    font-weight: bolder;

}


/* configura√ß√£o de bot√µes */


#btnZerar{
    background: red;
}

#btnValidar{
    background-color: #0b7425;

}


#btnEstudo{
    background-color: #2980b9;
}

#btnProxima, #btnPrev{
    padding: 0px;
    font-size: 2em;
     background-color: transparent;
     
}

#btnPrev{
    margin-right: -15px;
}
/* fim de configura√ß√£o de bot√µes */


/* Grupo de Controles no Menu (para Modo Leitura e Score) */
.controls-group {
    display: flex;
    align-items: center;
    gap: 5px; /* Espa√ßo entre label/select/span */
    color: #ffffff;
    font-size: 0.9em;
}

.controls-group label {
    margin-right: 5px;
}

.controls-group select {
    padding: 5px;
    border-radius: 4px;
    border: 1px solid #ccc;
    background-color: #f8f8f8;
    font-size: 0.9em;
}

#scoreDisplay {
    font-weight: bold;
    color: #f1c40f; /* Cor para o score */
}


/* Se√ß√µes de Quest√µes (Provas) */
.prova {
    margin-bottom: 30px;
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 8px;
    background-color: #fdfdfd;
}

.prova h2 {
    color: #2c3e50;
    border-bottom: 2px solid #e67e22;
    padding-bottom: 10px;
    margin-top: 0;
    margin-bottom: 20px;
}

.question {
    margin-bottom: 20px;
    padding: 15px;
    border: 1px solid #eee;
    border-radius: 6px;
    background-color: #ffffff;
}

.question p {
    font-weight: bold;
    margin-bottom: 10px;
    color: #555;
}

.question .options label {
    display: block;
    margin-bottom: 8px;
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
    transition: background-color 0.2s ease;
}

.question .options label:hover {
    background-color: #f0f0f0;
}

.question .options input[type="radio"] {
    margin-right: 10px;
}

/* Estilo para resposta correta */
.correct-answer {
    background-color: #d4edda; /* Verde claro */
    color: #155724; /* Verde escuro */
    font-weight: bold;
}

/* Estilo para resposta incorreta (opcional, se quiser destacar) */
.incorrect-answer {
    background-color: #f8d7da; /* Vermelho claro */
    color: #721c24; /* Vermelho escuro */
    font-weight: bold;
}

/* Div de Explica√ß√£o (Inicialmente oculta) */
.explanation {
    margin-top: 15px;
    padding: 15px;
    background-color: #ecf0f1;
    border-left: 5px solid #3498db;
    border-radius: 4px;
    font-size: 0.9em;
    color: #555;
    display: none; /* Inicia oculta */
}

/* Estilo para quando a div de explica√ß√£o estiver vis√≠vel */
.explanation.show {
    display: block;
}

/* Rodap√© */
footer {
    text-align: center;
    margin-top: 30px;
    padding: 15px;
    background-color: #2c3e50;
    color: #ffffff;
    border-radius: 0 0 8px 8px;
}

/* Lista de Exerc√≠cios (Opcional, inicialmente oculta) */
#listaExercicios {
    display: none; /* Oculta por padr√£o */
    margin-top: 20px;
    padding: 20px;
    background-color: #ecf0f1;
    border-radius: 8px;
    border: 1px solid #ccc;
}

#listaExercicios ul {
    list-style: none;
    padding: 0;
}

#listaExercicios ul li {
    margin-bottom: 10px;
}

#listaExercicios ul li button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    width: 100%; /* Para que os bot√µes ocupem 100% da largura */
    text-align: left; /* Alinhar texto √† esquerda */
}

#listaExercicios ul li button:hover {
    background-color: #2980b9;
}

/* ESTILO PARA DESTAQUE DE LEITURA (MANTIDO E INTEGRADO) */
.highlighted-text {
    background-color: #ffff99; /* Amarelo suave */
    font-weight: bold; /* Opcional: deixar o texto em negrito */
    transition: background-color 0.3s ease; /* Transi√ß√£o suave para o destaque */
    padding: 2px 5px; /* Pequeno preenchimento para visualiza√ß√£o */
    border-radius: 3px;
}

/* estilos/style.css */

/* ... (seu CSS existente) ... */



/* BOT√ÉO SABER MAIS */

.explanation button.saber-mais-btn {
    background-color: #4CAF50; /* Um verde agrad√°vel */
    color: white;
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9em;
    margin-top: 10px; /* Espa√ßamento acima do bot√£o */
    float: right; /* Para alinhar √† direita */
    transition: background-color 0.3s ease;
}

.explanation button.saber-mais-btn:hover {
    background-color: #45a049; /* Verde um pouco mais escuro ao passar o mouse */
}

/* Limpar o float para que o pr√≥ximo conte√∫do n√£o flutue ao lado do bot√£o */
.explanation::after {
    content: "";
    display: table;
    clear: both;
}

/* estilos/style_apoio.css */
/* --- Se√ß√£o de Contato --- */
#contato {
    max-width: 800px;
    margin: 10px auto;
    padding: 30px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    text-align: center; /* Centraliza o texto dentro da se√ß√£o */
}

#contato h2 {
    color: #882baf; /* Cor para o t√≠tulo */
    margin-bottom: 15px;
    font-size: 2em;
}

#contato p {
    font-size: 1.1em;
    line-height: 1.8;
    margin-bottom: 25px;
}

/* Estilo para o link "FALE CONOSCO" */
#contato div:nth-of-type(2) { /* Seleciona o segundo div da se√ß√£o */
    margin-bottom: 30px;
}

#contato a {
    text-decoration: none;
    color: #007bff;
    font-weight: bold;
    font-size: 1.2em;
    display: inline-flex; /* Para alinhar imagem e texto */
    align-items: center;
    gap: 10px; /* Espa√ßo entre imagem e texto */
    transition: color 0.3s ease;
}

#apoio a {
    text-decoration: none;
    color: #007bff;
    font-weight: bold;
    font-size: 1.2em;
    display: inline-flex; /* Para alinhar imagem e texto */
    align-items: center;
    gap: 10px; /* Espa√ßo entre imagem e texto */
    transition: color 0.3s ease;
}

#contato a:hover {
    color: #0056b3;
}

.fale-conosco-icon { /* Classe para sua imagem */
    width: 50px; /* Ajuste o tamanho conforme necess√°rio */
    height: auto;
    vertical-align: middle; /* Alinha a imagem com o texto */
}

/* Estilos para o formul√°rio */
.form-group {
    margin-bottom: 20px;
    text-align: left; /* Alinha os r√≥tulos e campos √† esquerda */
}

.form-group label {
    display: block; /* Cada label em uma nova linha */
    margin-bottom: 8px;
    font-weight: bold;
    color: #555;
}

input[type="text"],
textarea {
    width: calc(100% - 20px); /* Ocupa a largura total menos o padding */
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1em;
    box-sizing: border-box; /* Garante que padding n√£o aumente a largura total */
}

textarea {
    resize: vertical; /* Permite redimensionar apenas verticalmente */
    min-height: 120px; /* Altura m√≠nima da caixa de texto */
}

button {
    background-color: #03571c; /* Cor do bot√£o */
    color: white;
    padding: 12px 25px;
    border: none;
    border-radius: 5px;
    font-size: 1.1em;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    margin-top: 15px;
}

button:hover {
    background-color: #6a2185; /* Cor mais escura no hover */
    transform: translateY(-2px); /* Pequeno efeito de eleva√ß√£o */
}

/* ... restante do c√≥digo ... */

/* Estilos para o formul√°rio */
.form-group {
    margin-bottom: 20px;
    text-align: left; /* Alinha os r√≥tulos e campos √† esquerda */
}

.form-group label {
    display: block; /* Cada label em uma nova linha */
    margin-bottom: 8px;
    font-weight: bold;
    color: #555;
}

input[type="text"],
input[type="email"], /* Adicionei isso para garantir que o estilo se aplique ao campo de email */
textarea {
    width: calc(100% - 20px); /* Ocupa a largura total menos o padding */
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1em;
    box-sizing: border-box; /* Garante que padding n√£o aumente a largura total */
}

textarea {
    resize: vertical; /* Permite redimensionar apenas verticalmente */
    min-height: 120px; /* Altura m√≠nima da caixa de texto */
}

button {
    background-color: #03772a; /* Cor do bot√£o */
    color: white;
    padding: 12px 25px;
    border: none;
    border-radius: 5px;
    font-size: 1.1em;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    margin-top: 15px;
}

button:hover {
    background-color: #3268db; /* Cor mais escura no hover */
    transform: translateY(-2px); /* Pequeno efeito de eleva√ß√£o */
}

/* ... restante do c√≥digo ... */


/* info */

#info{
    padding: 10px;
}
#info h2{
    font-size: 1em;
    text-align: center;
    margin: 0;
    color: gray;
}
/* info */

/****************************** fim de entre em cotato *******************************/


/*********************** apoio ************************/

#apoio {
    /* ... (manter estilos existentes para #apoio) ... */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 30px 20px;
    background-color: #f9f9f9;
    border-top: 1px solid #eee;
    border-bottom: 1px solid #eee;
    margin: 20px 0;
}

#apoio p {
    /* ... (manter estilos existentes para #apoio p) ... */
    text-align: center;
    margin-bottom: 25px;
    font-size: 1.2em;
    color: #333;
    max-width: 600px;
    line-height: 1.6;
}

#apoio .share-buttons {
    /* ... (manter estilos existentes para #apoio .share-buttons) ... */
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px; /* Reduzi um pouco a margem para dar espa√ßo ao novo bot√£o */
    flex-wrap: wrap;
    gap: 15px;
}

#apoio .share-buttons img {
    /* ... (manter estilos existentes para #apoio .share-buttons img) ... */
    max-width: 150px;
    height: auto;
    border-radius: 0;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

#apoio .share-buttons img:hover {
    /* ... (manter estilos existentes para hover) ... */
    transform: scale(1.1);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

/* Estilos para o novo bot√£o "COPIAR LINK" */
#apoio .copy-link-button {
    text-align: center;
    margin-bottom: 20px; /* Espa√ßo entre o bot√£o de copiar e o bot√£o de apoio */
    width: 100%; /* Garante que a div ocupe a largura total para centralizar */
}

#apoio .copy-link-button button {
    display: inline-block;
    padding: 12px 30px; /* Um pouco menor que o bot√£o de apoio principal */
    background-color: #4681b6; /* Uma cor neutra para o bot√£o de copiar */
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: bold;
    font-size: 1em;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.3s ease;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
}

#apoio .copy-link-button button:hover {
    background-color: #495057; /* Cor mais escura no hover */
    transform: translateY(-2px); /* Leve movimento para cima */
    box-shadow: 0 5px 12px rgba(0, 0, 0, 0.2);
}


/* Estilos para o bot√£o "APOIAR COM DONATIOVO" */
#apoio div:last-of-type a { /* Importante: este seletor pode precisar de ajuste se adicionar mais divs */
    /* ... (manter estilos existentes para #apoio div:last-of-type a) ... */
    display: inline-block;
    padding: 15px 40px;
    background-color: #068526;
    color: white;
    text-decoration: none;
    border-radius: 10px;
    font-weight: bold;
    font-size: 1.1em;
    letter-spacing: 0.05em;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
}

#apoio div:last-of-type a:hover {
    /* ... (manter estilos existentes para hover) ... */
    background-color: #6a2185;
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
}

/********************* fim apoio *************************/

...restante do c√≥digo...
...................FIM DO style.css......................


...................INICIO DO script.js......................
...restante do c√≥digo...

// scritp/script.js

// 'questoes' ser√° carregado do arquivo script/provas.js

let currentProofIndex = 0; // Controla qual prova est√° sendo exibida (0 para prova1, 1 para prova2, etc.)
let currentQuestionIndex = 0; // Controla a quest√£o atual dentro da prova
let currentScore = 0; // Vari√°vel para o score
let totalQuestions = 0; // Vari√°vel para o total de quest√µes na prova atual

// Vari√°vel para controle da leitura em voz alta
let speechSynthesizer = null;
let currentUtterance = null; // Para controlar a fala atual

// Vari√°vel para controlar a leitura sequencial no Modo Estudo
let studyModeReadingIndex = 0;
let isReadingStudyMode = false; // Flag para saber se estamos no modo estudo de leitura

// Elementos do DOM
const quizContainer = document.getElementById('quiz-container');
const scoreDisplay = document.getElementById('scoreDisplay');
const modoLeituraSelect = document.getElementById('modoLeitura');

// Fun√ß√£o para atualizar o display do score
function updateScoreDisplay() {
    scoreDisplay.textContent = `${currentScore}/${totalQuestions}`;
}

// Fun√ß√£o para gerar as quest√µes na p√°gina HTML
function gerarQuestoes(provaKey) {
    quizContainer.innerHTML = ''; // Limpa o conte√∫do anterior

    // Verifica se 'questoes' est√° definido e se a provaKey existe
    if (typeof questoes === 'undefined' || !questoes[provaKey]) {
        // Mensagem de fallback, se por algum motivo ainda n√£o encontrar
        quizContainer.innerHTML = '<p>Erro: Dados das provas n√£o carregados ou prova n√£o encontrada. Verifique seu arquivo script/provas.js.</p>';
        console.error('Objeto "questoes" n√£o encontrado ou provaKey inv√°lida:', provaKey);
        return;
    }

    const provaData = questoes[provaKey];
    totalQuestions = provaData.length; // Atualiza o total de quest√µes
    currentScore = 0; // Reseta o score para a nova prova
    updateScoreDisplay(); // Atualiza o display do score

    const provaDiv = document.createElement('div');
    provaDiv.className = 'prova';
    provaDiv.id = provaKey;

    const tituloProva = document.createElement('h2');
    tituloProva.textContent = provaKey.replace('prova', 'Prova '); // Ex: "Prova 1"
    provaDiv.appendChild(tituloProva);

    provaData.forEach((item, index) => {
        const questionDiv = document.createElement('div');
        questionDiv.className = 'question';
        questionDiv.setAttribute('data-question-id', `${provaKey}-q${index}`); // ID √∫nico para a quest√£o

        const questionText = document.createElement('p');
        questionText.textContent = `Quest√£o ${index + 1}: ${item.questao}`;
        questionDiv.appendChild(questionText);

        const optionsDiv = document.createElement('div');
        optionsDiv.className = 'options';

        item.opcoes.forEach((opcao, opIndex) => {
            const label = document.createElement('label');
            const input = document.createElement('input');
            input.type = 'radio';
            input.name = `${provaKey}-questao-${index}`; // Garante que apenas uma op√ß√£o possa ser selecionada por quest√£o
            input.value = opIndex;
            input.setAttribute('data-correct', opcao.correta);

            label.appendChild(input);
            label.appendChild(document.createTextNode(String.fromCharCode(97 + opIndex) + ') ' + opcao.texto)); // a), b), c), d)
            optionsDiv.appendChild(label);
        });

        questionDiv.appendChild(optionsDiv);

        /************* CRIAR EXPLICA√á√ÉO ***************/

        const explanationDiv = document.createElement('div');
        explanationDiv.className = 'explanation';

        // CONTE√öDO DA RESOLU√á√ÉO (APENAS O TEXTO)
        const resolutionContent = document.createElement('p');
        resolutionContent.innerHTML = `<strong>Resolu√ß√£o:</strong> ${item.resolucao}`;
        explanationDiv.appendChild(resolutionContent);

        // NOVO: BOT√ÉO "SABER MAIS"
        const saberMaisBtn = document.createElement('button');
        saberMaisBtn.textContent = 'Saber Mais';
        saberMaisBtn.className = 'saber-mais-btn'; // Use a classe CSS que adicionamos
        saberMaisBtn.addEventListener('click', (event) => { // <-- Adicionado 'event' como par√¢metro
            event.stopPropagation(); // <-- CRUCIAL: Impede que o clique no bot√£o "suba" para a div da resolu√ß√£o
            pararLeitura(); // Para qualquer leitura antes de abrir o Gemini

            // Pega apenas o texto da resolu√ß√£o, excluindo a tag <strong>
            const fullResolutionText = resolutionContent.textContent.replace('Resolu√ß√£o: ', '').trim();
            abrirGeminiComResolucao(fullResolutionText);
        });
        explanationDiv.appendChild(saberMaisBtn);

        // NOVO LISTENER: Adicionado especificamente para a explica√ß√£o
        // Este listener s√≥ ser√° ativado se o clique for na explanationDiv, mas n√£o no bot√£o Saber Mais (devido ao stopPropagation)
        explanationDiv.addEventListener('click', (event) => {
            // Se o modo de leitura est√° em "mudo", n√£o faz a leitura.
            if (modoLeituraSelect.value === 'mudo') {
                pararLeitura();
                return;
            }

            pararLeitura(); // Para qualquer leitura anterior

            // Seleciona especificamente o par√°grafo dentro da explanationDiv
            // (que cont√©m o texto da resolu√ß√£o).
            // Usamos event.currentTarget para garantir que estamos buscando dentro da 'explanationDiv' clicada.
            const explanationParagraph = event.currentTarget.querySelector('p');
            if (explanationParagraph) {
                // Pega o texto do par√°grafo, removendo o "Resolu√ß√£o: " inicial
                const textToRead = explanationParagraph.textContent.replace('Resolu√ß√£o:', '').trim(); // Corrigido para remover "Resolu√ß√£o:" com dois pontos
                lerTexto(textToRead);
            }
        });


        questionDiv.appendChild(explanationDiv);

        // ADICIONA A QUEST√ÉO √Ä PROVA DIV
        provaDiv.appendChild(questionDiv);
    });

    // ANEXA A PROVA COMPLETA AO CONT√äINER PRINCIPAL
    quizContainer.appendChild(provaDiv);
    currentQuestionIndex = 0; // Reinicia o √≠ndice da quest√£o para a nova prova
}

// Fun√ß√£o para inicializar o SpeechSynthesis
function initSpeechSynthesis() {
    if ('speechSynthesis' in window) {
        speechSynthesizer = window.speechSynthesis;
    } else {
        alert('Seu navegador n√£o suporta a API SpeechSynthesis. A fun√ß√£o de leitura n√£o estar√° dispon√≠vel.');
        // Desativar op√ß√µes de leitura se a API n√£o estiver dispon√≠vel
        modoLeituraSelect.value = 'mudo';
        modoLeituraSelect.disabled = true;
        document.getElementById('btnLer').disabled = true;
        document.getElementById('btnStop').disabled = true;
        document.getElementById('btnEstudo').disabled = true;
    }
}

// Fun√ß√£o para ler o texto (usada para ler texto completo ou elementos individuais)
function lerTexto(text) {
    if (speechSynthesizer && modoLeituraSelect.value !== 'mudo') {
        pararLeitura(); // Para qualquer leitura anterior

        console.log('Tentando ler texto:', text);
        currentUtterance = new SpeechSynthesisUtterance(text);
        currentUtterance.lang = 'pt-BR'; // Define o idioma para portugu√™s do Brasil

        currentUtterance.onend = function(event) {
            console.log('Leitura conclu√≠da com sucesso!');
        };
        currentUtterance.onerror = function(event) {
            console.error('Erro na leitura:', event.error);
        };

        speechSynthesizer.speak(currentUtterance);
    } else {
        console.log('Leitura desativada: speechSynthesizer n√£o dispon√≠vel ou modo est√° em mudo.', {
            speechSynthesizer: speechSynthesizer,
            modoLeituraValue: modoLeituraSelect.value
        });
    }
}

// Fun√ß√£o para parar a leitura
function pararLeitura() {
    if (speechSynthesizer && speechSynthesizer.speaking) {
        speechSynthesizer.cancel();
    }
    currentUtterance = null;
    // Sempre remove destaques ao parar a leitura
    document.querySelectorAll('.highlighted-text').forEach(el => {
        el.classList.remove('highlighted-text');
    });
}

// Fun√ß√£o para iniciar a leitura da pr√≥xima parte da quest√£o no Modo Estudo
function readStudyPart(provaData, questionIndex, partIndex) {
    pararLeitura(); // Garante que a leitura atual √© interrompida

    const item = provaData[questionIndex];
    let textToRead = '';
    let elementToHighlight = null; // O elemento HTML a ser destacado

    // Limpa destaques anteriores (importante para transi√ß√µes entre partes da mesma quest√£o)
    document.querySelectorAll('.highlighted-text').forEach(el => {
        el.classList.remove('highlighted-text');
    });

    const currentQuestionDiv = document.querySelector(`#prova${currentProofIndex + 1} [data-question-id="prova${currentProofIndex + 1}-q${questionIndex}"]`);
    if (!currentQuestionDiv) {
        console.error('Div da quest√£o n√£o encontrada para destaque.');
        isReadingStudyMode = false;
        return;
    }

    // Rola a tela para a quest√£o atual
    currentQuestionDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });


    switch (partIndex) {
        case 0: // Enunciado da quest√£o
            textToRead = `Quest√£o ${questionIndex + 1}: ${item.questao}`;
            elementToHighlight = currentQuestionDiv.querySelector('p'); // O par√°grafo do enunciado
            break;
        case 1: // Resposta correta
            const correctOption = item.opcoes.find(op => op.correta);
            textToRead = correctOption ? `Resposta correta: ${correctOption.texto}` : 'Resposta correta n√£o encontrada.';
            // Encontra o label da resposta correta para destacar
            elementToHighlight = currentQuestionDiv.querySelector(`input[name="prova${currentProofIndex + 1}-questao-${questionIndex}"][data-correct="true"]`).closest('label');
            break;
        case 2: // Resolu√ß√£o
            textToRead = `Resolu√ß√£o: ${item.resolucao}`;
            elementToHighlight = currentQuestionDiv.querySelector('.explanation'); // A div da resolu√ß√£o
            break;
        default:
            // Todas as partes desta quest√£o foram lidas, passar para a pr√≥xima quest√£o
            studyModeReadingIndex++;
            if (isReadingStudyMode && studyModeReadingIndex < provaData.length) {
                readStudyPart(provaData, studyModeReadingIndex, 0); // Inicia a pr√≥xima quest√£o do zero
            } else {
                // Todas as quest√µes foram lidas
                isReadingStudyMode = false;
                console.log("Modo Estudo: Leitura da prova conclu√≠da.");
                alert('Modo Estudo conclu√≠do!');
            }
            return; // Sai da fun√ß√£o, n√£o h√° mais texto para ler nesta parte
    }

    if (elementToHighlight) {
        elementToHighlight.classList.add('highlighted-text');
    }

    currentUtterance = new SpeechSynthesisUtterance(textToRead);
    currentUtterance.lang = 'pt-BR';

    currentUtterance.onend = function() {
        console.log(`Modo Estudo: Leitura da parte ${partIndex} da quest√£o ${questionIndex + 1} conclu√≠da.`);
        // Remove destaque da parte atual ap√≥s a leitura
        if (elementToHighlight) {
            elementToHighlight.classList.remove('highlighted-text');
        }
        // Chama a pr√≥xima parte da mesma quest√£o ou a primeira parte da pr√≥xima quest√£o
        if (isReadingStudyMode) { // S√≥ continua se o modo estudo ainda estiver ativo
            readStudyPart(provaData, questionIndex, partIndex + 1);
        }
    };
    currentUtterance.onerror = function(event) {
        console.error(`Modo Estudo: Erro na leitura da parte ${partIndex} da quest√£o ${questionIndex + 1}:`, event.error);
        // Em caso de erro, remove o destaque e tenta ir para a pr√≥xima parte
        if (elementToHighlight) {
            elementToHighlight.classList.remove('highlighted-text');
        }
        if (isReadingStudyMode) { // S√≥ continua se o modo estudo ainda estiver ativo
            readStudyPart(provaData, questionIndex, partIndex + 1);
        }
    };

    speechSynthesizer.speak(currentUtterance);
}


// NOVA FUN√á√ÉO: ABRE O GEMINI COM A RESOLU√á√ÉO
function abrirGeminiComResolucao(resolucaoTexto) {
    // Codifica o texto da resolu√ß√£o para ser seguro em uma URL
    const encodedResolution = encodeURIComponent(resolucaoTexto + "\n\nExplique melhor.");

    // URL base do Google Search. O Gemini √© acessado via Google Search para prompts
    // A interface do Gemini pode mudar, mas essa abordagem de busca costuma ser robusta.
    const geminiUrl = `https://www.google.com/search?q=${encodedResolution}&udm=0`; // udm=2 for√ßa o modo de conversa√ß√£o/gemini

    window.open(geminiUrl, '_blank'); // Abre em uma nova aba
}


// --- Fun√ß√µes dos Bot√µes do Menu ---

// Bot√£o ZERAR
document.getElementById('btnZerar').addEventListener('click', () => {
    if (confirm('Tem certeza que deseja zerar o progresso atual e recome√ßar?')) {
        pararLeitura(); // Para a leitura e remove destaques
        isReadingStudyMode = false; // Desativa o modo estudo de leitura

        const allRadios = document.querySelectorAll('input[type="radio"]');
        allRadios.forEach(radio => {
            radio.checked = false;
            radio.closest('label').classList.remove('correct-answer', 'incorrect-answer');
        });

        const allExplanations = document.querySelectorAll('.explanation');
        allExplanations.forEach(exp => {
            exp.classList.remove('show');
        });

        currentScore = 0; // Reseta o score
        updateScoreDisplay(); // Atualiza o display

        alert('Progresso zerado!');
    }
});

// Bot√£o VALIDAR
document.getElementById('btnValidar').addEventListener('click', () => {
    pararLeitura(); // Para a leitura e remove destaques
    isReadingStudyMode = false; // Desativa o modo estudo de leitura

    const currentProvaKey = `prova${currentProofIndex + 1}`;
    const currentProvaData = questoes[currentProvaKey];
    if (!currentProvaData) return;

    let allAnswered = true;
    let correctAnswersCount = 0; // Contador de acertos

    const questionsElements = document.querySelectorAll(`#${currentProvaKey} .question`);

    questionsElements.forEach((qElement, qIndex) => {
        const selectedOption = qElement.querySelector(`input[name="${currentProvaKey}-questao-${qIndex}"]:checked`);
        const explanationDiv = qElement.querySelector('.explanation');
        const labels = qElement.querySelectorAll('.options label');

        // Remove classes de feedback anteriores
        labels.forEach(label => label.classList.remove('correct-answer', 'incorrect-answer'));

        if (!selectedOption) {
            allAnswered = false;
            // Se n√£o respondida, garante que a explica√ß√£o esteja oculta (ou n√£o destacada)
            explanationDiv.classList.remove('show');
        } else {
            const isCorrect = selectedOption.getAttribute('data-correct') === 'true';
            const selectedLabel = selectedOption.closest('label');

            if (isCorrect) {
                selectedLabel.classList.add('correct-answer');
                correctAnswersCount++; // Incrementa o score
            } else {
                selectedLabel.classList.add('incorrect-answer');
                // Encontrar e marcar a correta em azul, mesmo que o usu√°rio tenha errado
                const correctLabel = qElement.querySelector(`input[name="${currentProvaKey}-questao-${qIndex}"][data-correct="true"]`).closest('label');
                correctLabel.classList.add('correct-answer');
            }
            explanationDiv.classList.add('show'); // Mostra a resolu√ß√£o
        }
    });

    if (!allAnswered) {
        alert('Por favor, responda a todas as quest√µes antes de validar.');
    } else {
        currentScore = correctAnswersCount; // Atualiza o score com as acertos
        alert(`Corre√ß√£o conclu√≠da! Voc√™ acertou ${currentScore} de ${totalQuestions} quest√µes.`);
    }
    updateScoreDisplay(); // Atualiza o display do score ap√≥s a valida√ß√£o
});

// Bot√£o LER PROVA COMPLETA (L√™ todo o conte√∫do vis√≠vel de uma vez!)
document.getElementById('btnLer').addEventListener('click', () => {
    pararLeitura(); // Para a leitura e remove destaques
    isReadingStudyMode = false; // Desativa o modo estudo de leitura se ativo

    const currentProvaKey = `prova${currentProofIndex + 1}`;
    const currentProvaElement = document.getElementById(currentProvaKey);

    if (currentProvaElement && modoLeituraSelect.value !== 'mudo') {
        let fullTextToRead = '';
        fullTextToRead += currentProvaElement.querySelector('h2').textContent + '. '; // T√≠tulo da prova

        currentProvaElement.querySelectorAll('.question').forEach((questionDiv) => {
            const questionText = questionDiv.querySelector('p').textContent;
            fullTextToRead += questionText + '. ';

            if (modoLeituraSelect.value === 'completa') { // Inclui op√ß√µes se o modo for 'completa'
                questionDiv.querySelectorAll('.options label').forEach(label => {
                    const optionText = label.textContent;
                    fullTextToRead += optionText + '. ';
                });
            }
        });
        lerTexto(fullTextToRead); // Usa a fun√ß√£o lerTexto original para ler a string completa
    } else if (modoLeituraSelect.value === 'mudo') {
        alert('O modo de leitura est√° em "Mudo". Por favor, selecione outra op√ß√£o para ativar a leitura.');
    } else {
        alert('Nenhuma prova carregada para leitura.');
    }
});

// Bot√£o STOP LEITURA
document.getElementById('btnStop').addEventListener('click', () => {
    pararLeitura(); // Para a leitura e remove destaques
    isReadingStudyMode = false; // Desativa o modo estudo de leitura
});

// Bot√£o MODO ESTUDO (Inicia a leitura sequencial com destaque)
document.getElementById('btnEstudo').addEventListener('click', () => {
    pararLeitura(); // Para qualquer leitura anterior e remove destaques
    isReadingStudyMode = true; // Ativa o flag do modo estudo
    studyModeReadingIndex = 0; // Reinicia o contador de quest√µes

    const currentProvaKey = `prova${currentProofIndex + 1}`;
    const currentProvaData = questoes[currentProvaKey];
    if (!currentProvaData) {
        alert('Nenhuma prova carregada para o modo estudo.');
        return;
    }

    // 1. Exibir todas as respostas corretas e resolu√ß√µes
    const questionsElements = document.querySelectorAll(`#${currentProvaKey} .question`);
    questionsElements.forEach((qElement, qIndex) => {
        const explanationDiv = qElement.querySelector('.explanation');
        const labels = qElement.querySelectorAll('.options label');

        labels.forEach(label => label.classList.remove('correct-answer', 'incorrect-answer'));

        const correctOption = currentProvaData[qIndex].opcoes.find(op => op.correta);
        if (correctOption) {
            const correctLabelElement = qElement.querySelector(`input[name="${currentProvaKey}-questao-${qIndex}"][data-correct="true"]`).closest('label');
            correctLabelElement.classList.add('correct-answer');
        }
        explanationDiv.classList.add('show');
    });

    // 2. Iniciar leitura autom√°tica (pergunta, resposta correta, resolu√ß√£o)
    if (modoLeituraSelect.value !== 'mudo') {
        readStudyPart(currentProvaData, studyModeReadingIndex, 0); // Inicia a leitura da primeira parte da primeira quest√£o
    } else {
        alert('O modo de leitura est√° em "Mudo". As respostas e resolu√ß√µes foram exibidas, mas a leitura autom√°tica est√° desativada.');
    }
});


// Bot√£o PR√ìXIMA PROVA
document.getElementById('btnProxima').addEventListener('click', () => {
    pararLeitura(); // Para a leitura e remove destaques
    isReadingStudyMode = false; // Desativa o modo estudo de leitura

    if (typeof questoes === 'undefined') {
        alert('Erro: Dados das provas n√£o carregados.');
        return;
    }

    const totalProvas = Object.keys(questoes).length;
    if (currentProofIndex < totalProvas - 1) {
        currentProofIndex++;
        const nextProvaKey = `prova${currentProofIndex + 1}`;
        gerarQuestoes(nextProvaKey);
        // Zera o estado da nova prova ao carregar
        document.getElementById('btnZerar').click(); // Reusa a fun√ß√£o zerar para limpar o estado
    } else {
        alert('Voc√™ chegou ao final das provas dispon√≠veis.');
    }
});

// PROVA ANTERIOR
document.getElementById('btnPrev').addEventListener('click', () => {
    pararLeitura(); // Para a leitura e remove destaques
    isReadingStudyMode = false; // Desativa o modo estudo de leitura

    if (typeof questoes === 'undefined') {
        alert('Erro: Dados das provas n√£o carregados.');
        return;
    }

    if (currentProofIndex > 0) { // Verifica se n√£o estamos na primeira prova
        currentProofIndex--; // Decrementa o √≠ndice para ir para a prova anterior
        const prevProvaKey = `prova${currentProofIndex + 1}`; // Calcula a chave da prova anterior
        gerarQuestoes(prevProvaKey); // Carrega as quest√µes da prova anterior
        // Zera o estado da nova prova ao carregar
        document.getElementById('btnZerar').click(); // Reusa a fun√ß√£o zerar para limpar o estado
    } else {
        alert('Voc√™ j√° est√° na primeira prova dispon√≠vel.');
    }
});

// Bot√£o LISTA (para exibir as provas dispon√≠veis e permitir sele√ß√£o)
document.getElementById('btnLista').addEventListener('click', () => {
    pararLeitura(); // Para a leitura e remove destaques
    isReadingStudyMode = false; // Desativa o modo estudo de leitura

    const listaDiv = document.getElementById('listaExercicios');
    listaDiv.innerHTML = '<h3>Escolha uma Prova:</h3><ul></ul>';
    const ul = listaDiv.querySelector('ul');

    if (typeof questoes === 'undefined') {
        ul.innerHTML = '<li>Erro: Dados das provas n√£o carregados.</li>';
        listaDiv.style.display = 'block';
        return;
    }

    Object.keys(questoes).forEach((key, index) => {
        const li = document.createElement('li');
        const button = document.createElement('button');
        button.textContent = key.replace('prova', 'Prova ');
        button.addEventListener('click', () => {
            currentProofIndex = index;
            gerarQuestoes(key);
            listaDiv.style.display = 'none'; // Esconde a lista ap√≥s a sele√ß√£o
            document.getElementById('btnZerar').click(); // Zera o estado da prova carregada
        });
        li.appendChild(button);
        ul.appendChild(li);
    });

    // Alterna a visibilidade da lista
    listaDiv.style.display = listaDiv.style.display === 'block' ? 'none' : 'block';
});

// Event listener para o MODO LEITURA (sele√ß√£o de caixa de texto)
modoLeituraSelect.addEventListener('change', () => {
    pararLeitura(); // Para a leitura e remove destaques
    isReadingStudyMode = false; // Desativa o modo estudo de leitura

    const selectedMode = modoLeituraSelect.value;
    if (selectedMode === 'mudo') {
        alert('Modo de leitura desativado.');
    } else {
        alert(`Modo de leitura definido para: "${modoLeituraSelect.options[modoLeituraSelect.selectedIndex].text}".`);
    }
});


// Event listener para ler quest√µes/op√ß√µes ao clicar nelas (depende do MODO LEITURA)
// IMPORTANTE: A l√≥gica para clicar na resolu√ß√£o foi removida daqui
// e adicionada diretamente na explanationDiv na fun√ß√£o gerarQuestoes() para maior precis√£o.
document.addEventListener('click', (event) => {
    // Se o modo estudo de leitura estiver ativo, n√£o interfere com cliques individuais
    if (isReadingStudyMode) {
        return;
    }

    if (modoLeituraSelect.value === 'mudo') {
        pararLeitura(); // Garante que n√£o ler√° nada se estiver no mudo
        return;
    }

    pararLeitura(); // Para qualquer leitura anterior de elementos individuais e remove destaques

    if (event.target.closest('.question p')) { // Clicou no texto da quest√£o (enunciado)
        const questionDiv = event.target.closest('.question');
        const questionText = questionDiv.querySelector('p').textContent;

        if (modoLeituraSelect.value === 'completa') {
            let fullQuestionText = questionText + '. ';
            questionDiv.querySelectorAll('.options label').forEach(label => {
                fullQuestionText += label.textContent + '. ';
            });
            lerTexto(fullQuestionText);
        } else if (modoLeituraSelect.value === 'enunciado') {
            lerTexto(questionText);
        }
    } else if (event.target.closest('.question .options label')) { // Clicou em uma op√ß√£o
        const optionText = event.target.closest('.question .options label').textContent;
        lerTexto(optionText);
    }
    // O bloco 'else if (event.target.closest('.explanation.show'))' foi REMOVIDO daqui.
    // Ele agora √© tratado por um listener mais espec√≠fico na fun√ß√£o gerarQuestoes.
});

// Inicializa√ß√£o: carrega a primeira prova quando a p√°gina √© carregada
document.addEventListener('DOMContentLoaded', () => {
    initSpeechSynthesis();
    gerarQuestoes('prova1'); // Carrega a PROVA 1 por padr√£o ao iniciar
});

...fim do script.js

/ media/provas.js

const questoes = {
    'prova1': [
        // Suas quest√µes da prova1 aqui
        {
            questao: 'De acordo com a Constitui√ß√£o Federal de 1988, a seguridade social brasileira compreende um conjunto integrado de a√ß√µes de iniciativa dos Poderes P√∫blicos e da sociedade, visando assegurar os direitos relativos √†:',
            opcoes: [
                { texto: 'A seguridade social compreende a sa√∫de, a previd√™ncia social e a assist√™ncia social.', correta: true },
                { texto: 'A seguridade social compreende apenas a previd√™ncia social e a assist√™ncia social.', correta: false },
                { texto: 'A seguridade social compreende a sa√∫de e a previd√™ncia social, excluindo a assist√™ncia social.', correta: false },
                { texto: 'A seguridade social √© exclusivamente responsabilidade do Minist√©rio da Previd√™ncia Social.', correta: false }
            ],
            resolucao: 'A Constitui√ß√£o Federal de 1988, em seu Art. 194, define a seguridade social como um conjunto integrado de a√ß√µes que englobam a sa√∫de, a previd√™ncia social e a assist√™ncia social.'
        },
        {
            questao: 'Sobre a Previd√™ncia Social no Brasil, √© correto afirmar que:',
            opcoes: [
                { texto: 'Apenas os trabalhadores com carteira assinada t√™m direito √† Previd√™ncia Social.', correta: false },
                { texto: 'A Previd√™ncia Social √© um sistema contributivo e de filia√ß√£o obrigat√≥ria, respeitando os princ√≠pios da universalidade de cobertura e do c√°lculo dos benef√≠cios.', correta: true },
                { texto: 'A Previd√™ncia Social oferece benef√≠cios para todos os cidad√£os, independentemente de contribui√ß√£o pr√©via.', correta: false },
                { texto: 'Os benef√≠cios da Previd√™ncia Social s√£o custeados exclusivamente pelos empregadores.', correta: 

...restante dos c√≥digos...

segurado e sua situa√ß√£o contributiva anterior.'
        },
        {
            questao: 'Quais s√£o as principais fontes de custeio da Seguridade Social, conforme a legisla√ß√£o brasileira?',
            opcoes: [
                { texto: 'S√£o fontes de custeio da Seguridade Social as contribui√ß√µes sociais dos empregadores, dos trabalhadores e sobre a receita de concursos de progn√≥sticos, entre outras.', correta: true },
                { texto: 'O custeio da Seguridade Social √© feito exclusivamente por impostos gerais da Uni√£o.', correta: false },
                { texto: 'Apenas os trabalhadores formais contribuem para o custeio da Seguridade Social.', correta: false },
                { texto: 'As contribui√ß√µes para a Seguridade Social s√£o facultativas para todos os segurados.', correta: false }
            ],
            resolucao: 'A Seguridade Social no Brasil √© financiada por diversas fontes, conforme o Art. 195 da Constitui√ß√£o Federal, incluindo as contribui√ß√µes sociais de empregadores (sobre a folha de sal√°rios, receita ou faturamento, lucro), trabalhadores e sobre a receita de concursos de progn√≥sticos, entre outras fontes de receita da Uni√£o.'
        }
    ],
    'prova2': [
        // Suas quest√µes da prova2 aqui
        {
            questao: 'Sobre a previd√™ncia complementar, assinale a alternativa correta:',
            opcoes: [
                { texto: 'A previd√™ncia complementar possui car√°ter facultativo e √© organizada de forma aut√¥noma em rela√ß√£o ao Regime Geral de Previd√™ncia Social.', correta: true },
                { texto: 'A previd√™ncia complementar √© de filia√ß√£o 


...restante do c√≥digo...
...................FIM DO script.js......................

LISTA DE ARQUIVOS midia/:


Fim dos c√≥digos.